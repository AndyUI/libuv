#!/bin/bash

TOOLS_ROOT=`pwd`
ANDROID_API=19
ARCHS=("android" "android-armeabi" "android64-aarch64" "android-x86" "android64")
ABIS=("armeabi" "armeabi-v7a" "arm64-v8a" "x86" "x86_64")

configure() {
  ARCH=$1; OUT=$2; CLANG=${3:-""};

  TOOLCHAIN_ROOT=${TOOLS_ROOT}/${OUT}-android-toolchain

  if [ "$ARCH" == "android" ]; then
    export ARCH_FLAGS="-mthumb"
    export ARCH_LINK=""
    export TOOL="arm-linux-androideabi"
    NDK_FLAGS="--arch=arm"
  elif [ "$ARCH" == "android-armeabi" ]; then
    export ARCH_FLAGS="-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -mthumb -mfpu=neon"
    export ARCH_LINK="-march=armv7-a -Wl,--fix-cortex-a8"
    export TOOL="arm-linux-androideabi"
    NDK_FLAGS="--arch=arm"
  elif [ "$ARCH" == "android64-aarch64" ]; then
    export ARCH_FLAGS=""
    export ARCH_LINK=""
    export TOOL="aarch64-linux-android"
    NDK_FLAGS="--arch=arm64"
    ANDROID_API=21
  elif [ "$ARCH" == "android-x86" ]; then
    export ARCH_FLAGS="-march=i686 -mtune=intel -msse3 -mfpmath=sse -m32"
    export ARCH_LINK=""
    export TOOL="i686-linux-android"
    NDK_FLAGS="--arch=x86"
  elif [ "$ARCH" == "android64" ]; then
    export ARCH_FLAGS="-march=x86-64 -msse4.2 -mpopcnt -m64 -mtune=intel"
    export ARCH_LINK=""
    export TOOL="x86_64-linux-android"
    NDK_FLAGS="--arch=x86_64"
    ANDROID_API=21
  elif [ "$ARCH" == "android-mips" ]; then
    export ARCH_FLAGS=""
    export ARCH_LINK=""
    export TOOL="mipsel-linux-android"
    NDK_FLAGS="--arch=mips"
  elif [ "$ARCH" == "android-mips64" ]; then
    export ARCH="linux64-mips64"
    export ARCH_FLAGS=""
    export ARCH_LINK=""
    export TOOL="mips64el-linux-android"
    NDK_FLAGS="--arch=mips64"
    ANDROID_API=21
  fi;
  echo 'gen standalone toolchain--'
  [ -d ${TOOLCHAIN_ROOT} ] || python $NDK/build/tools/make_standalone_toolchain.py \
                                     --api ${ANDROID_API} \
                                     --install-dir=${TOOLCHAIN_ROOT} \
                                     $NDK_FLAGS

  if [ not -d ${TOOLCHAIN_ROOT} ];then
    exit
  fi;

  export TOOLCHAIN_PATH=${TOOLCHAIN_ROOT}/bin
  export NDK_TOOLCHAIN_BASENAME=${TOOLCHAIN_PATH}/${TOOL}
  export SYSROOT=${TOOLCHAIN_ROOT}/sysroot
  export CROSS_SYSROOT=$SYSROOT
  if [ -z "${CLANG}" ]; then
    export CC=${NDK_TOOLCHAIN_BASENAME}-gcc
    export CXX=${NDK_TOOLCHAIN_BASENAME}-g++
  else
    export CC=${NDK_TOOLCHAIN_BASENAME}-clang
    export CXX=${NDK_TOOLCHAIN_BASENAME}-clang++
  fi;
  export LINK=${CXX}
  export LD=${NDK_TOOLCHAIN_BASENAME}-ld
  export AR=${NDK_TOOLCHAIN_BASENAME}-ar
  export RANLIB=${NDK_TOOLCHAIN_BASENAME}-ranlib
  export STRIP=${NDK_TOOLCHAIN_BASENAME}-strip
  export CPPFLAGS=${CPPFLAGS:-""}
  export LIBS=${LIBS:-""}
  #export CFLAGS="${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64"
  #export CXXFLAGS="${CFLAGS} -std=c++11 -frtti -fexceptions"
  export LDFLAGS="${ARCH_LINK}"
  echo "**********************************************"
  echo "use ANDROID_API=${ANDROID_API}"
  echo "use NDK=${NDK}"
  echo "export ARCH=${ARCH}"
  echo "export NDK_TOOLCHAIN_BASENAME=${NDK_TOOLCHAIN_BASENAME}"
  echo "export SYSROOT=${SYSROOT}"
  echo "export CC=${CC}"
  echo "export CXX=${CXX}"
  echo "export LINK=${LINK}"
  echo "export LD=${LD}"
  echo "export AR=${AR}"
  echo "export RANLIB=${RANLIB}"
  echo "export STRIP=${STRIP}"
  echo "export CPPFLAGS=${CPPFLAGS}"
  echo "export CFLAGS=${CFLAGS}"
  echo "export CXXFLAGS=${CXXFLAGS}"
  echo "export LDFLAGS=${LDFLAGS}"
  echo "export LIBS=${LIBS}"
  echo "**********************************************"
}

#export TOOLCHAIN=$PWD/android-toolchain
#mkdir -p $TOOLCHAIN
#API=${3:-24}
#$1/build/tools/make-standalone-toolchain.sh \
#    --toolchain=arm-linux-androideabi-4.9 \
#    --arch=arm \
#    --install-dir=$TOOLCHAIN \
#    --platform=android-$API \
#    --force
#export PATH=$TOOLCHAIN/bin:$PATH
#export AR=arm-linux-androideabi-ar
#export CC=arm-linux-androideabi-gcc
#export CXX=arm-linux-androideabi-g++
#export LINK=arm-linux-androideabi-g++
#export PLATFORM=android
export CFLAGS="-D__ANDROID_API__=${ANDROID_API} -fPIC"

for ((i=0; i < ${#ARCHS[@]}; i++))
do
    configure "${ARCHS[i]}" "${ABIS[i]}"
    ./gyp_uv.py -Dtarget_arch=arm -DOS=android -f make-android
    BUILDTYPE=Release make -C out -B
    mkdir -p `pwd`/out/android/${ABIS[i]}
    cp out/Release/libuv.a out/android/${ABIS[i]}
    cp out/Release/run-tests out/android/${ABIS[i]}
done

#configure $*
#
#if [[ $3 == 'gyp' ]]
#  then
#    ./gyp_uv.py -Dtarget_arch=arm -DOS=android -f make-android
#fi
#
#BUILDTYPE=Release make -C out -B
#
#mkdir -p `pwd`/out/android/$2
#cp out/Release/libuv.a out/android/$2
